worker_processes  1;

error_log  /var/log/nginx/error.log debug; 
pid        /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    lua_shared_dict my_cache 10m;

    upstream access_service {
        server access_service:8000; 
    }

    upstream message_service {
        server message_service:8001; 
    }

    upstream ws_message_service {
        server ws_message_service:8002; 
    }

    server {
        listen 80;

        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE';
        add_header Access-Control-Allow-Headers 'Content-Type, Authorization, X-Requested-With';

        location /access/ {
            proxy_pass http://access_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /auth/ {
            internal;
            proxy_pass http://access_service/token/verify;  
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;

            header_filter_by_lua_block {
                local headers = ngx.resp.get_headers()
                local token = headers["X-User-Uid"]
                if token then
                    ngx.shared.my_cache:set("token", token)
                end
            }
        }

        location /message/ {
            auth_request /auth/;
            set $token "";
            access_by_lua_block {
                local token = ngx.shared.my_cache:get("token")
                if token then
                    ngx.var.token = token  
                else
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)  
                end
            }

            proxy_pass http://message_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $token;
        }
            
        location /ws/ {
            auth_request /auth/;

            set $token "";
            access_by_lua_block {
                local token = ngx.shared.my_cache:get("token")
                if token then
                    ngx.var.token = token  
                else
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)  
                end
            }
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;

            proxy_pass http://ws_message_service/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";

            proxy_set_header Authorization $token;
        }
    }
}